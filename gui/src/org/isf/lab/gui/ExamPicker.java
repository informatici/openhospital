
package org.isf.lab.gui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableModel;

import org.isf.exa.model.Exam;
import org.isf.generaldata.MessageBundle;
import org.isf.priceslist.model.Price;
import org.isf.utils.jobjects.OhDefaultCellRenderer;
import org.isf.utils.jobjects.OhTableModelExam;

/**
 *
 * @author julio
 */
public class ExamPicker extends javax.swing.JPanel {

	   OhDefaultCellRenderer cellRenderer = new OhDefaultCellRenderer();
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form ChooseMedicaments
     */
    public ExamPicker(TableModel model) {
        initComponents(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents(TableModel model) {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        jPanel3.setBackground(new java.awt.Color(240, 240, 240));

        jPanel1.setBackground(new java.awt.Color(240, 240, 240));
       
        setLayout(new BorderLayout(10, 10));
        add(jPanel1, BorderLayout.CENTER);
        GridBagLayout gbl_jPanel1 = new GridBagLayout();
        gbl_jPanel1.columnWidths = new int[]{575, 0};
        gbl_jPanel1.rowHeights = new int[]{268, 0};
        gbl_jPanel1.columnWeights = new double[]{1.0, Double.MIN_VALUE};
        gbl_jPanel1.rowWeights = new double[]{1.0, Double.MIN_VALUE};
        jPanel1.setLayout(gbl_jPanel1);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        
        
        
        jTableData.setSelectionModel(new DefaultListSelectionModel() {
		    @Override
		    public void setSelectionInterval(int index0, int index1) {
		        if(super.isSelectedIndex(index0)) {
		            super.removeSelectionInterval(index0, index1);
		        }
		        else {
		            super.addSelectionInterval(index0, index1);
		        }
		    }
		});
        
        
        jTableData.setDefaultRenderer(Object.class, cellRenderer);
        jTableData.setDefaultRenderer(Double.class, cellRenderer);
        jTableData.addMouseMotionListener(new MouseMotionListener() {			
			@Override
			public void mouseMoved(MouseEvent e) {
				// TODO Auto-generated method stub
				JTable aTable =  (JTable)e.getSource();
		        int itsRow = aTable.rowAtPoint(e.getPoint());
		        if(itsRow>=0){
		        	cellRenderer.setHoveredRow(itsRow);
		        }
		        else{
		        	cellRenderer.setHoveredRow(-1);
		        }
		        aTable.repaint();
			}
			
			@Override
			public void mouseDragged(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
        jTableData.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseExited(MouseEvent e) {
				cellRenderer.setHoveredRow(-1);
			}
		});
        
        
        
        jTableData.setModel(model);
        jTableData.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableData.setShowVerticalLines(false);
        jTableData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDataMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
            	if (evt.getClickCount() == 2) {
               	    validateSelection();
                }
            }
        });
        
        jTableData.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent e) {
        		if(e.getKeyCode()==KeyEvent.VK_ENTER){
        			validateSelection();
        		}
        		super.keyPressed(e);
        	}
		});
        
        jScrollPane1.setViewportView(jTableData);
        GridBagConstraints gbc_jScrollPane1 = new GridBagConstraints();
        gbc_jScrollPane1.insets = new Insets(0, 15, 0, 15);
        gbc_jScrollPane1.fill = GridBagConstraints.BOTH;
        gbc_jScrollPane1.gridx = 0;
        gbc_jScrollPane1.gridy = 0;
        jPanel1.add(jScrollPane1, gbc_jScrollPane1);
        add(jPanel3,  BorderLayout.NORTH);
        GridBagLayout gbl_jPanel3 = new GridBagLayout();
        gbl_jPanel3.columnWidths = new int[] {90, 237, 0};
        gbl_jPanel3.rowHeights = new int[] {50, 0};
        gbl_jPanel3.columnWeights = new double[]{0.0, 1.0, Double.MIN_VALUE};
        gbl_jPanel3.rowWeights = new double[]{0.0, Double.MIN_VALUE};
        jPanel3.setLayout(gbl_jPanel3);
        
        jLabelImage = new javax.swing.JLabel();
        
        jLabelImage.setIcon(new javax.swing.ImageIcon("rsc/icons/operation_dialog.png"));
        
                jLabelImage.setText(MessageBundle.getMessage("angal.exams.find"));
                GridBagConstraints gbc_jLabelImage = new GridBagConstraints();
                gbc_jLabelImage.anchor = GridBagConstraints.WEST;
                gbc_jLabelImage.insets = new Insets(0, 15, 0, 5);
                gbc_jLabelImage.gridx = 0;
                gbc_jLabelImage.gridy = 0;
                jPanel3.add(jLabelImage, gbc_jLabelImage);
        jTextFieldFind = new javax.swing.JTextField();
        
        jTextFieldFind.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				jTableData.clearSelection();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				jTableData.clearSelection();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				jTableData.clearSelection();
			}
        	
        });

        jTextFieldFind.setName("textRecherche");
        GridBagConstraints gbc_jTextFieldFind = new GridBagConstraints();
        gbc_jTextFieldFind.insets = new Insets(0, 0, 0, 15);
        gbc_jTextFieldFind.fill = GridBagConstraints.HORIZONTAL;
        gbc_jTextFieldFind.gridx = 1;
        gbc_jTextFieldFind.gridy = 0;
        jPanel3.add(jTextFieldFind, gbc_jTextFieldFind);
        

        
        

        jTextFieldFind.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextFieldFind.getText();
                OhTableModelExam<Price> model=(OhTableModelExam<Price>)jTableData.getModel();
                model.filter(text);
                if(jTableData.getRowCount()>0){
                	jTableData.setRowSelectionInterval(0, 0);
                }
                jTableData.repaint();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jTextFieldFind.getText();

                OhTableModelExam<Price> model=(OhTableModelExam<Price>)jTableData.getModel();
                model.filter(text);
                if(jTableData.getRowCount()>0){
                	jTableData.setRowSelectionInterval(0, 0);
                }
                jTableData.repaint();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); 
            }

        });
        
        jTextFieldFind.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent e) {
        		// TODO Auto-generated method stub
        		if(e.getKeyCode()==KeyEvent.VK_ENTER){
        			validateSelection();
        		}
        		super.keyPressed(e);
        	}
		});
        
        jPanel2 = new javax.swing.JPanel();
        jButtonSelect = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();
        
        jPanel2.setBackground(new java.awt.Color(240, 240, 240));

        jButtonSelect.setText(MessageBundle.getMessage("angal.ward.select")); 
        jButtonSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSelectMouseClicked(evt);
            }
        });
        jButtonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectActionPerformed(evt);
            }
        });

        jButtonQuit.setText(MessageBundle.getMessage("angal.common.cancel"));
        jButtonQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonQuitMouseClicked(evt);
            }
        });
        
        add(jPanel2, BorderLayout.SOUTH);
        jPanel2.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        jPanel2.add(jButtonSelect);
        jPanel2.add(jButtonQuit);
        
    }
    
    

    
    private void jTableDataMouseClicked(java.awt.event.MouseEvent evt) {
        
    }

    private void validateSelection() {
	       this.setSelectedRow(this.jTableData.getSelectedRow());
	       this.setVisible(false);
	       this.getParentFrame().dispose();
	       
    }

    private void jButtonSelectActionPerformed(java.awt.event.ActionEvent evt) {
       this.setSelectedRow(this.jTableData.getSelectedRow());
            this.setVisible(false);
            this.getParentFrame().dispose();
    }

    private void jButtonSelectMouseClicked(java.awt.event.MouseEvent evt) {  
           
            this.setSelectedRow(this.jTableData.getSelectedRow());
            this.setVisible(false);
            this.getParentFrame().dispose();
	}
    
    private void jButtonQuitMouseClicked(java.awt.event.MouseEvent evt) {                                      
    	this.setVisible(false);
	    this.getParentFrame().dispose();
    }

    private int selectedRow = -1;
    private int getSelectedRow() {
		return selectedRow;
	}
    
    public Object getSelectedObject(){
    	OhTableModelExam<?> model=(OhTableModelExam<?>)jTableData.getModel();
    	return model.getObjectAt(this.getSelectedRow());
    }
    
    public ArrayList<Exam> getAllSelectedObject(){
    	OhTableModelExam<?> model=(OhTableModelExam<?>)jTableData.getModel();
    	ArrayList<Exam> exams = new ArrayList<Exam>();
    	int[] selectedRows = this.jTableData.getSelectedRows();
         
    	for(int i = 0; i<selectedRows.length;i++){
    		exams.add((Exam) model.getObjectAt(selectedRows[i]));
    	}
    	return exams;
    }

	private void setSelectedRow(int selectedRow) {
		this.selectedRow = selectedRow;
            
	}

	
    private JDialog parentFrame;
	public JDialog getParentFrame() {
		return parentFrame;
	}

	public void setParentFrame(JDialog parentFrame) {
		this.parentFrame = parentFrame;
	}


    private javax.swing.JButton jButtonSelect;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableData;
    private javax.swing.JTextField jTextFieldFind;

}
