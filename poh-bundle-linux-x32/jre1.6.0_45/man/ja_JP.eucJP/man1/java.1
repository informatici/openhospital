." Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved. 
."
.TH java 1 "06 Apr 2010"
." Generated from HTML by html2man (author: Eric Armstrong)

.LP
.SH "名前"
java \- Java アプリケーション起動ツール
.LP
.RS 3
.TP 2
o
形式 
.TP 2
o
説明 
.TP 2
o
オプション 
.TP 2
o
関連項目 
.RE

.LP
.SH "形式"
.LP
.nf
\f3
.fl
    \fP\f3java\fP [ options ] class [ argument ... ]
.fl
    \f3java\fP [ options ] \f3\-jar\fP file.jar [ argument ... ]
.fl
.fi

.LP
.RS 3

.LP
.RS 3
.TP 3
options 
コマンド行オプション。 
.TP 3
class 
呼び出されるクラスの名前 
.TP 3
file.jar 
呼び出される JAR ファイルの名前。必ず \f2\-jar\fP とともに使用する 
.TP 3
argument 
\f3main\fP 関数に渡される引数 
.RE

.LP
.RE
.SH " 説明"
.LP

.LP
.LP
\f3java\fP ツールは、Java アプリケーションを起動します。java ツールは、Java Runtime Environment を起動したあと、指定されたクラスをロードし、そのクラスの \f3main\fP メソッドを呼び出すことにより、Java アプリケーションを起動します。
.LP
.LP
このメソッドは、public および static として宣言する必要があります。 また、値を返してはいけません。 さらに、\f2String\fP 配列をパラメータとして指定できなければなりません。メソッドの宣言は、次のようになっていなければなりません。
.LP
.nf
\f3
.fl
    public static void main(String args[])
.fl
\fP
.fi

.LP
.LP
デフォルトでは、コマンド行オプション以外の最初の引数が、呼び出されるクラスの名前になります。この名前には、完全指定のクラス名を使用する必要があります。\f3\-jar\fP オプションを指定した場合、コマンド行オプション以外の最初の引数が、アプリケーションのクラスファイルとリソースファイルを含む \f3JAR\fP アーカイブの名前になります。 この場合、マニフェストの \f3Main\-Class\fP ヘッダーで指定されたクラスが起動クラスになります。
.LP
.LP
Java Runtime は、ブートストラップクラスパス、インストール型拡張機能、およびユーザークラスパスの 3 箇所から起動クラスと他の使用されているクラスを検索します。
.LP
.LP
クラス名または JAR ファイル名のあとにある、コマンド行オプション以外の引数は、\f3main\fP 関数に渡されます。
.LP
.SH "オプション"
.LP

.LP
.LP
起動ツールには、現在の実行環境および将来のリリースでサポートされる標準オプションがあります。また、仮想マシンの現在の実装では、非標準オプションのセットもサポートされます。 これは、将来のリリースで変更される可能性があります。
.LP
.SH "標準オプション"
.LP

.LP
.RS 3
.TP 3
\-client 
.LP
Java HotSpot Client VM を選択します。64 ビット対応 JDK は現時点では、このオプションを無視し、代わりに Java Hotspot Server VM を使用します。 
.LP
デフォルトの VM の選択については、
.na
\f2「サーバー \- クラスマシンの検出」\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/vm/server\-class.htmlを参照してください。  
.TP 3
\-server 
.LP
Java HotSpot Server VM を選択します。64 ビット対応 JDK 上では、サポートされるのは Java Hotspot Server VM だけであるため、\-server オプションが暗黙的に選択されます。 
.LP
デフォルトの VM の選択については、
.na
\f2「サーバー \- クラスマシンの検出」\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/vm/server\-class.htmlを参照してください。  
.TP 3
\-agentlib:libname[=options] 
ネイティブエージェントライブラリ \f2libname\fP をロードします。 たとえば次のように指定します。 
.LP
\-agentlib:hprof 
.LP
\-agentlib:jdwp=help 
.LP
\-agentlib:hprof=help 
.LP
詳細については、
.na
\f2「JVMTI エージェントのコマンド行オプション」\fP @
.fi
http://java.sun.com/javase/6/docs/platform/jvmti/jvmti.html#startingを参照してください。  
.TP 3
\-agentpath:pathname[=options] 
フルパス名を使用して、ネーティブエージェントライブラリをロードします。詳細については、
.na
\f2「JVMTI エージェントのコマンド行オプション」\fP @
.fi
http://java.sun.com/javase/6/docs/platform/jvmti/jvmti.html#startingを参照してください。 
.TP 3
\-classpath classpath 
.TP 3
\-cp classpath 
クラスファイルを検索するディレクトリ、JAR アーカイブ、および ZIP アーカイブのリストを指定します。クラスパスの各エントリはコロン (\f3:\fP) で区切ります。\f3\-classpath\fP または \f3\-cp\fP を指定すると、このオプションの値によって \f3CLASSPATH\fP 環境変数の設定がオーバーライドされます。 
.LP
\f3\-classpath\fP も \f3\-cp\fP も使用されず、\f3CLASSPATH\fP も設定されていない場合、ユーザークラスパスは現在のディレクトリ (\f4.\fP) になります。  
.LP
便宜上、\f2*\fP のベース名を含むクラスパス要素は、ディレクトリ内の拡張子 \f2.jar\fP または \f2.JAR\fP を持つすべてのファイルのリストを指定するのと同じとみなされます (Java プログラムはこの 2 つの呼び出しを区別できない)。
.br
.br
たとえば、ディレクトリ \f2foo\fP に \f2a.jar\fP と \f2b.JAR\fP が含まれている場合、クラスパス要素 \f2foo/*\fP は \f2A.jar:b.JAR\fP に展開されます。 ただし、JAR ファイルの順番は指定されません。このリストには、隠しファイルも含め、指定されたディレクトリ内のすべての JAR ファイルが含まれます。\f2*\fP だけから成るクラスパスエントリは、カレントディレクトリ内のすべての JAR ファイルのリストに展開されます。\f2CLASSPATH\fP 環境変数も、定義時には同様に展開されます。クラスパスのワイルドカード展開は必ず、Java 仮想マシンの起動前に実行されます。したがって、\f2System.getenv("CLASSPATH")\fP 呼び出しのように環境に問い合わせを行わない限り、Java プログラムが展開されていないワイルドカードを認識することはありません。  
.LP
クラスパスの詳細は、
.na
\f2「クラスパスの設定」\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/tools/index.html#classpathを参照してください。  
.TP 3
\-Dproperty=value 
システムプロパティーの値を設定します。 
.TP 3
\-d32 
.TP 3
\-d64 
それぞれ 32 ビット環境、64 ビット環境でプログラムを実行することを要求します。要求された環境がインストールされていないかサポートされていない場合は、エラーが報告されます。 
.LP
現在のところ、Java HotSpot Server VM だけが 64 ビットの操作をサポートしており、\-d64 を使用すると \-server オプションが暗黙的に有効になります。したがって、\-d64 使用時には「\-client」オプションは無視されます。この仕様は、将来のリリースでは変更になる可能性があります。 
.LP
\f3\-d32\fP と \f3\-d64\fP がどちらも指定されていない場合は、デフォルトとして、32 ビット環境で実行されます。この仕様は、将来のリリースでは変更になる可能性があります。  
.TP 3
\-enableassertions[:<package name>"..."| :<class name> ] 
.TP 3
\-ea[:<package name>"..."| :<class name> ] 
アサーションを有効にします。アサーションは、デフォルトでは無効になっています。 
.LP
引数なしの \f3enableassertions\fP または \f3\-ea\fP を指定すると、アサーションが有効になります。「\f2...\fP」で終わる引数を 1 つ指定すると、指定したパッケージとそのサブパッケージ内でアサーションが有効になります。引数として「\f2...\fP」だけを指定すると、現在の作業ディレクトリにある名前のないパッケージ内でアサーションが有効になります。「\f2...\fP」で終わらない引数を 1 つ指定すると、指定したクラス内でアサーションが有効になります。 
.LP
単一コマンド行にこれらのスイッチのインスタンスを複数指定した場合は、指定したスイッチが順番に処理されてからクラスがロードされます。したがって、たとえば、パッケージ \f2com.wombat.fruitbat\fP (サブパッケージを含む) 内でのみアサーションを有効にしてプログラムを実行するには、次のようなコマンドを使用します。 
.nf
\f3
.fl
java \-ea:com.wombat.fruitbat... <Main Class>
.fl
\fP
.fi
.LP
\f3\-enableassertions\fP および \f3\-ea\fP スイッチは、すべてのクラスローダおよびシステムクラスに適用されます。 システムクラスにはクラスローダはありません。ただし、この規則には例外が 1 つあります。それは、引数なしでこのスイッチを指定すると、その指定はシステムクラスには適用されない、ということです。この例外を利用すれば、システムクラスを除くすべてのクラスでアサーションを簡単に有効にすることができます。すべてのシステムクラスでアサーションを有効にするために、別のスイッチが用意されています。 このあとの \f3\-enablesystemassertions\fP を参照してください。  
.TP 3
\-disableassertions[:<package name>"..."| :<class name> ] 
.TP 3
\-da[:<package name>"..."| :<class name> ] 
アサーションを無効にします。これはデフォルトの設定です。 
.LP
引数なしの \f3disableassertions\fP または \f3\-da\fP を指定すると、アサーションが無効になります。「\f2...\fP」で終わる引数を 1 つ指定すると、指定したパッケージとそのサブパッケージ内でアサーションが無効になります。引数として「\f2...\fP」だけを指定すると、現在の作業ディレクトリにある名前のないパッケージ内でアサーションが無効になります。「\f2...\fP」で終わらない引数を 1 つ指定すると、指定したクラス内でアサーションが無効になります。 
.LP
パッケージ \f2com.wombat.fruitbat\fP 内ではアサーションを有効にし、クラス \f2com.wombat.fruitbat.Brickbat\fP 内ではアサーションを無効にしたうえで、プログラムを実行するには、次のようなコマンドを使用します。 
.nf
\f3
.fl
java \-ea:com.wombat.fruitbat... \-da:com.wombat.fruitbat.Brickbat <Main Class>
.fl
\fP
.fi
.LP
\f3\-disableassertions\fP および \f3\-da\fP スイッチは、すべてのクラスローダおよびシステムクラスに適用されます。 システムクラスにはクラスローダはありません。ただし、この規則には例外が 1 つあります。それは、引数なしでこのスイッチを指定すると、その指定はシステムクラスには適用されない、ということです。この例外を利用すれば、システムクラスを除くすべてのクラスでアサーションを簡単に有効にすることができます。すべてのシステムクラスでアサーションを無効にするために、別のスイッチが用意されています。 このあとの \f3\-disablesystemassertions\fP を参照してください。  
.TP 3
\-enablesystemassertions 
.TP 3
\-esa 
すべてのシステムクラス内でアサーションを有効にします。 つまり、システムクラスについてアサーションのデフォルトステータスを \f2true\fP に設定します。 
.TP 3
\-disablesystemassertions 
.TP 3
\-dsa 
すべてのシステムクラス内でアサーションを無効にします。 
.LP
.TP 3
\-jar 
JAR ファイルにカプセル化されたプログラムを実行します。最初の引数は、起動クラスの名前ではなく、JAR ファイルの名前にします。このオプションが機能するには、JAR ファイルのマニフェストに\f3「Main\-Class:\fP\f4classname\fP\f3」\fPという形式の行を指定する必要があります。\f2classname\fP には、アプリケーションの開始位置として機能する \f2public\ static\ void\ main(String[]\ args)\fP メソッドを含むクラスを指定します。JAR ファイルとそのマニフェストについては、jar(1)と、
.na
\f2Java チュートリアル\fP @
.fi
http://java.sun.com/docs/books/tutorial/jarの「Trail: Jar Files」を参照してください。 
.LP
このオプションを使用すると、指定した JAR ファイルがすべてのユーザークラスのソースになり、ユーザークラスパスのほかの設定は無視されます。 
.LP
Solaris 8 では、「java \-jar」オプションで実行できる JAR ファイルは、実行権限のセットを保持しています。 このため、「java \-jar」を使用しないで実行することも可能です。
.na
\f2Java Archive (JAR) ファイル\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/jar/index.htmlを参照してください。  
.TP 3
\-javaagent:jarpath[=options] 
Java プログラミング言語エージェントをロードします。
.na
\f2java.lang.instrument\fP @
.fi
http://java.sun.com/javase/6/docs/api/java/lang/instrument/package\-summary.html を参照してください。 
.TP 3
\-verbose 
.TP 3
\-verbose:class 
クラスがロードされるたびにクラスに関する情報を表示します。 
.TP 3
\-verbose:gc 
ガベージコレクションイベントが発生するたびに報告します。 
.TP 3
\-verbose:jni 
ネイティブメソッドの使用およびその他の Java Native Interface (JNI) アクティビティーに関する情報を報告します。 
.TP 3
\-version 
バージョン情報を表示して終了します。 
.TP 3
\-version:release 
コマンド行に指定されたクラスまたは JAR ファイルが、\f2release\fP で指定されたバージョンを必要としていることを示します。起動された java コマンドのバージョンがこの指定内容を満たさず、かつ適切な実装がシステム上で見つかった場合には、その適切な実装が使用されます。 
.LP
\f2release\fP では、特定のバージョンを指定できるだけでなく、バージョン文字列と呼ばれるバージョンのリストを指定することもできます。バージョン文字列は、いくつかのバージョン範囲を空白で区切った形式の順序付きリストです。バージョン範囲は、バージョン ID、バージョン ID の後にアスタリスク (*) を付加したもの、バージョン ID の後にプラス記号 (+) を付加したもの、2 つのバージョン範囲をアンパサンド (&) で結合したもの、のいずれかになります。アスタリスクはプレフィックス一致を、プラス記号は指定されたバージョン以上を、アンパサンドは 2 つのバージョン範囲の論理積を、それぞれ意味します。例を示します。 
.nf
\f3
.fl
\-version:"1.5.0_04 1.5*&1.5.1_02+"
.fl
\fP
.fi
上記の意味は、バージョン 1.5.0_04、または 1.5.1_02 以上で 1.5 をバージョン ID プレフィックスとして持つバージョン、のいずれかをクラスまたは JAR ファイルが必要とする、ということです。 バージョン文字列の厳密な構文や定義については、「Java Network Launching Protocol & API Specification (JSR\-56)」の「Appendix A」を参照してください。 
.LP
JAR ファイルの場合は通常、バージョン要件をコマンド行に指定するよりも、JAR ファイルのマニフェスト内に指定することが推奨されています。 
.LP
このオプションの使用に関する重要なポリシー情報については、後述の「注」節を参照してください。  
.TP 3
\-showversion 
バージョン情報を表示して続行します。 
.TP 3
\-? 
.TP 3
\-help 
使用法を表示して終了します。 
.TP 3
\-X 
非標準オプションに関する情報を表示して終了します。 
.RE

.LP
.SS 
非標準オプション
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Xint 
インタプリタ専用モードで動作します。ネイティブコードへのコンパイルは無効になり、すべてのバイトコードがインタプリタによって実行されます。Java HotSpot VM に対応するコンパイラが提供するパフォーマンス上の利点は、このモードでは実現されません。 
.TP 3
\-Xbatch 
バックグラウンドコンパイルを無効にします。通常、VM では、バックグラウンドコンパイルが終了するまで、メソッドをバックグラウンドタスクとしてコンパイルし、インタプリタモードでメソッドを実行します。\f2\-Xbatch\fP フラグを指定すると、バックグラウンドコンパイルが無効になり、すべてのメソッドのコンパイルが完了するまでフォアグラウンドタスクとして処理されます。 
.TP 3
\-Xbootclasspath:bootclasspath 
ブートクラスファイルを探すディレクトリ、JAR アーカイブ、および ZIP アーカイブをコロンで区切ったリストで指定します。指定したパスに存在するブートクラスファイルが、Java 2 SDK に含まれるブートクラスファイルの代わりに使用されます。\f2注: rt.jar 内のクラスをオーバーライドする目的でこのオプションを使用するアプリケーションは、システムに配置しないでください。Java 2 Runtime Environment バイナリコードライセンス違反になります。\fP 
.TP 3
\-Xbootclasspath/a:path 
ディレクトリ、JAR アーカイブ、および ZIP アーカイブのパスをコロンで区切って指定します。 パスはデフォルトのブートストラップクラスパスのあとに追加されます。 
.TP 3
\-Xbootclasspath/p:path 
ディレクトリ、JAR アーカイブ、および ZIP アーカイブのパスをコロンで区切って指定します。 パスはデフォルトのブートストラップクラスパスの前に追加されます。\f2注 rt.jar 内のクラスをオーバーライドする目的でこのオプションを使用するアプリケーションは、システムに配置しないでください。Java 2 Runtime Environment バイナリコードライセンス違反になります。\fP 
.TP 3
\-Xcheck:jni 
Java Native Interface (JNI) 機能に対して追加チェックを行います。具体的には、Java 仮想マシンは JNI 要求を処理する前に、JNI 関数に渡されるパラメータと、実行環境のデータを検証します。無効なデータが見つかった場合は、ネイティブコードに問題があることを示しているため、Java 仮想マシンは致命的エラーを発生して終了します。このオプションを使用すると、パフォーマンス低下が予想されます。 
.TP 3
\-Xfuture 
クラスとファイルの形式を厳密にチェックします。下位互換性を保つため、Java 2 SDK の仮想マシンが実行するデフォルトの形式チェックは、JDK ソフトウェアのバージョン 1.1.x が実行するチェックと同程度の厳密さになっています。\f3\-Xfuture\fP フラグを指定すると、クラスファイル形式の仕様への準拠を強化するためのより厳密なチェックが有効になります。Java アプリケーション起動ツールの将来のリリースでは、より厳密なチェックがデフォルトになるため、新しいコードを開発するときにはこのフラグを使用することをお勧めします。 
.TP 3
\-Xnoclassgc 
クラスのガベージコレクションを無効にします。このオプションを使用すると、ロード済みクラスからメモリーが回復されることがなくなるため、全体的なメモリー使用量が増大します。この場合、アプリケーションによっては OutOfMemoryError がスローされる可能性があります。 
.TP 3
\-Xincgc 
インクリメンタルガーベジコレクタを有効にします。インクリメンタルガベージコレクタは、デフォルトでは無効になっています。 有効にすると、プログラムの実行中にガベージコレクションによる一時停止が発生しなくなります。インクリメンタルガベージコレクタは、プログラムと同時に実行することがあり、この場合、プログラムの利用できるプロセッサ能力が低下します。 
.TP 3
\-Xloggc:file 
\-verbose:gc と同様にガベージコレクションイベントが発生するたびに報告しますが、そのデータを \f2file\fP に記録します。\f2\-verbose:gc\fP を指定したときに報告される情報のほかに、報告される各イベントの先頭に、最初のガベージコレクションイベントからの経過時間 (秒単位) が付け加えられます。 
.LP
ネットワークの応答時間によって JVM の実行速度が低下するのを避けるため、このファイルの格納先は、常にローカルファイルシステムにしてください。ファイルシステムが満杯になると、ファイルは切り詰められ、そのファイルにデータが引き続き記録されます。このオプションと \f2\-verbose:gc\fP の両方がコマンド行に指定されている場合は、このオプションが優先されます。  
.LP
.TP 3
\-Xmsn 
メモリー割り当てプールの初期サイズをバイト数で指定します。指定する値は、1M バイトより大きい 1024 の倍数にしなければなりません。キロバイトを指定するには、文字 \f2k\fP または \f2K\fP を付けます。 メガバイトを指定するには、文字 \f2m\fP または \f2M\fP を付けます。デフォルト値は、実行時にシステムの設定に基づいて選択されます。詳細については、「HotSpot Ergonomics」を参照してください。
.br
例: 
.RS 3

.LP
.nf
\f3
.fl
       \-Xms6291456
.fl
       \-Xms6144k
.fl
       \-Xms6m
.fl
       
.fl
\fP
.fi
.RE
.TP 3
\-Xmxn 
メモリー割り当てプールの最大サイズをバイト数で指定します。指定する値は、2M バイトより大きい 1024 の倍数にしなければなりません。キロバイトを指定するには、文字 \f2k\fP または \f2K\fP を付けます。 メガバイトを指定するには、文字 \f2m\fP または \f2M\fP を付けます。デフォルト値は、実行時にシステムの設定に基づいて選択されます。詳細については、「HotSpot Ergonomics」を参照してください。
.br
例: 
.RS 3

.LP
.nf
\f3
.fl
       \-Xmx83886080
.fl
       \-Xmx81920k
.fl
       \-Xmx80m
.fl
       
.fl
\fP
.fi
.RE
Solaris 7 および Solaris 8 SPARC プラットフォームの場合、この値の上限はおよそ 4000m からオーバーヘッドの量を引いたものであり、Solaris 2.6 および x86 プラットフォームの場合は 2000m からオーバーヘッドの量を引いたものです。Linux プラットフォームの場合の上限は、およそ 2000m からオーバーヘッドの量を引いたものです。 
.TP 3
\-Xprof 
実行中のプログラムのプロファイルを生成し、プロファイリングデータを標準出力に出力します。このオプションは、プログラム開発用のユーティリティーとして提供されています。 本番稼動システムでの使用を目的としたものではありません。  
.LP
.TP 3
\-Xrs 
Java 仮想マシン (JVM) によるオペレーティングシステムシグナルの使用を減らします。 
.LP
以前のリリースでは、Java アプリケーションを秩序正しくシャットダウンするためのシャットダウンフック機能が追加されました。この機能により、JVM が突然終了した場合でも、シャットダウン時にユーザークリーンアップコード (データベース接続のクローズなど) を実行できるようになりました。 
.LP
Sun の JVM は、シグナルをキャッチすることによって、JVM の異常終了のためのシャットダウンフックを実装します。JVM は、SIGHUP、SIGINT、および SIGTERM を使用して、シャットダウンフックの実行を開始します。 
.LP
JVM は、デバッグの目的でスレッドスタックをダンプするという、1.2 より前からある機能を実現するためにも、同様の機構を使用します。Sun の JVM は、スレッドダンプを実行するために SIGQUIT を使用します。 
.LP
JVM を埋め込んでいるアプリケーションが SIGINT や SIGTERM などのシグナルを頻繁にトラップする必要があると、JVM そのもののシグナルハンドラの処理に支障が出る可能性があります。\f3\-Xrs\fP コマンド行オプションを使用すると、この問題に対処できます。Sun の JVM に対して \f3\-Xrs\fP を使用すると、SIGINT、SIGTERM、SIGHUP、および SIGQUIT に対するシグナルマスクは JVM によって変更されず、これらのシグナルに対するシグナルハンドラはインストールされません。 
.LP
\f3\-Xrs\fP を指定した場合、次の 2 つの影響があります。 
.RS 3
.TP 2
o
SIGQUIT によるスレッドダンプを利用できない 
.TP 2
o
シャットダウンフック処理の実行は、JVM が終了しようとしている時点で System.exit() を呼び出すなどして、ユーザーコード側で行う必要がある 
.RE
.TP 3
\-Xssn 
スレッドのスタックサイズを設定します。 
.TP 3
\-XX:+UseAltSigs 
VM ではデフォルトで \f2SIGUSR1\fP および \f2SIGUSR2\fP を使用しますが、\f2SIGUSR1\fP および \f2SIGUSR2\fP をシグナル連鎖するアプリケーションと 競合する場合があります。\f2\-XX:+UseAltSigs\fP オプションは、VM にデフォルトとして \f2SIGUSR1\fP と \f2SIGUSR2\fP 以外のシグナルを使用させます。 
.RE

.LP
.RE
.SH "注"
.LP

.LP
\f3\-version:\fP\f2release\fP コマンド行オプションでは、どんなに複雑にリリースを指定してもかまいません。ただし、現実的なリリース指定の限られたサブセットを使用するだけでも適切なポリシーを表現できるため、それらのサブセットのみが完全にサポートされます。それらのポリシーを次に示します。 
.RS 3
.TP 3
1.
任意のバージョン。 これは、このオプションを使用しないことで表現できます。 
.TP 3
2.
ある特定のバージョン ID よりも大きい任意のバージョン。 次に例を示します。 
.nf
\f3
.fl
"1.5.0_03+"
.fl
\fP
.fi
.LP
この場合、1.5.0_03 よりも大きい任意のバージョンが使用されます。 これは、指定されたバージョンで特定のインタフェースが導入された (あるいはそのバグが修正された) 場合に便利です。  
.TP 3
3.
ある特定のバージョン ID よりも大きいバージョン。 ただし、そのリリースファミリの上限によって制限するもの。例を示します。 
.nf
\f3
.fl
"1.5.0_03+&1.5*"
.fl
\fP
.fi
.TP 3
4.
上の項目 2 または 3 の「OR」表現。例を示します。 
.nf
\f3
.fl
"1.4.2_05+&1.4* 1.5+"
.fl
\fP
.fi
これは項目 2 に似ていますが、ある変更が特定のリリース (1.5) で導入されたが、その同じ変更が以前のリリースのアップデートでも利用可能になった、という場合に便利です。 
.RE

.LP
.SH "関連項目"
.LP

.LP
.RS 3
.TP 2
o
javac(1) 
.TP 2
o
jdb(1) 
.TP 2
o
javah(1) 
.TP 2
o
jar(1) 
.TP 2
o
.na
\f2「Java 拡張機能フレームワーク」\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/extensions/index.html 
.TP 2
o
.na
\f2「セキュリティー」\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/security/index.html 
.TP 2
o
.na
\f2「HotSpot VM Specific Options」\fP @
.fi
http://java.sun.com/docs/hotspot/VMOptions.html 
.RE

.LP
 
